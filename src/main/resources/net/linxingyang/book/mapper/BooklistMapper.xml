<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.linxingyang.book.mapper.BooklistMapper" >
  <resultMap id="BaseResultMap" type="net.linxingyang.book.pojo.Booklist" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="year" property="year" jdbcType="INTEGER" />
    <result column="book_name" property="bookName" jdbcType="VARCHAR" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="reading_thinking" property="readingThinking" jdbcType="VARCHAR" />
    <result column="discard" property="discard" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, year, book_name, author, state, reading_thinking, discard, create_date, modify_date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="net.linxingyang.book.pojo.BooklistExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from booklist
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from booklist
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from booklist
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="net.linxingyang.book.pojo.BooklistExample" >
    delete from booklist
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.linxingyang.book.pojo.Booklist" >
    insert into booklist (id, year, book_name, 
      author, state, reading_thinking, 
      discard, create_date, modify_date
      )
    values (#{id,jdbcType=INTEGER}, #{year,jdbcType=INTEGER}, #{bookName,jdbcType=VARCHAR}, 
      #{author,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{readingThinking,jdbcType=VARCHAR}, 
      #{discard,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{modifyDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="net.linxingyang.book.pojo.Booklist" >
    insert into booklist
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="year != null" >
        year,
      </if>
      <if test="bookName != null" >
        book_name,
      </if>
      <if test="author != null" >
        author,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="readingThinking != null" >
        reading_thinking,
      </if>
      <if test="discard != null" >
        discard,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="modifyDate != null" >
        modify_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="year != null" >
        #{year,jdbcType=INTEGER},
      </if>
      <if test="bookName != null" >
        #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="author != null" >
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="readingThinking != null" >
        #{readingThinking,jdbcType=VARCHAR},
      </if>
      <if test="discard != null" >
        #{discard,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyDate != null" >
        #{modifyDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.linxingyang.book.pojo.BooklistExample" resultType="java.lang.Integer" >
    select count(*) from booklist
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update booklist
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.year != null" >
        year = #{record.year,jdbcType=INTEGER},
      </if>
      <if test="record.bookName != null" >
        book_name = #{record.bookName,jdbcType=VARCHAR},
      </if>
      <if test="record.author != null" >
        author = #{record.author,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.readingThinking != null" >
        reading_thinking = #{record.readingThinking,jdbcType=VARCHAR},
      </if>
      <if test="record.discard != null" >
        discard = #{record.discard,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyDate != null" >
        modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update booklist
    set id = #{record.id,jdbcType=INTEGER},
      year = #{record.year,jdbcType=INTEGER},
      book_name = #{record.bookName,jdbcType=VARCHAR},
      author = #{record.author,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER},
      reading_thinking = #{record.readingThinking,jdbcType=VARCHAR},
      discard = #{record.discard,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      modify_date = #{record.modifyDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.linxingyang.book.pojo.Booklist" >
    update booklist
    <set >
      <if test="year != null" >
        year = #{year,jdbcType=INTEGER},
      </if>
      <if test="bookName != null" >
        book_name = #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="author != null" >
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="readingThinking != null" >
        reading_thinking = #{readingThinking,jdbcType=VARCHAR},
      </if>
      <if test="discard != null" >
        discard = #{discard,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyDate != null" >
        modify_date = #{modifyDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.linxingyang.book.pojo.Booklist" >
    update booklist
    set year = #{year,jdbcType=INTEGER},
      book_name = #{bookName,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      reading_thinking = #{readingThinking,jdbcType=VARCHAR},
      discard = #{discard,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      modify_date = #{modifyDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>