<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="net.linxingyang.book.mapper.BooklistCustomMapper">    <insert id="insert" parameterType="net.linxingyang.book.pojo.Booklist">        <selectKey resultType="int" order="AFTER" keyProperty="id">            SELECT LAST_INSERT_ID() AS id        </selectKey>        insert into booklist (id, year, book_name,             author, state, reading_thinking,             discard, create_date, modify_date)        values (#{id,jdbcType=INTEGER}, #{year,jdbcType=INTEGER}, #{bookName,jdbcType=VARCHAR},             #{author,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{readingThinking,jdbcType=VARCHAR},             #{discard,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{modifyDate,jdbcType=TIMESTAMP})    </insert>      <select id="selectIds" parameterType="net.linxingyang.book.qo.BooklistQo" resultType="java.lang.Integer">        select             distinct(booklist_id)         from             booklist_config        where            <!--  config_id in(24, 30) -->            <foreach collection="configIds" item="config_id" open="config_id in(" close=")" separator=",">                 #{config_id}            </foreach>        group by             booklist_id        having             count(booklist_id) >= #{configIdsLength}    </select>  <!--     <select id="selectIds" parameterType="net.linxingyang.book.qo.BooklistQo">        select             id         from             booklist	    <where>	        <if test="null != bookName and '' != bookName">	            and 	            (	                author like contact('%', #{bookName}, '%') or 	                book_name like contact('%', #{bookName}, '%')	            )	        </if>	        <if test="null != discard and -1 != discard">	            and discard = #{discard} 	        </if>	        <if test="">	        and                id in                    (                       select                            distinct(booklist_id)                        from                            booklist_config                       where                            <foreach collection="configIds" item="config_id" open="and config_id in(" close=")" separator=",">                                #{config_id}                           </foreach>                       group by                            booklist_id                       having                            count(booklist_id) >= #{configIdsLength}                   )	        </if>	    </where> 	    <if test="limit != null" >			<if test="offset != null" >			    limit ${offset}, ${limit}			</if>			<if test="offset == null" >			    limit ${limit}			</if>        </if>    </select>-->  </mapper>