package net.linxingyang.personal.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.mapper.PeopleHistoryCustomMapper;import net.linxingyang.personal.mapper.PeopleHistoryMapper;import net.linxingyang.personal.pojo.PeopleHistory;import net.linxingyang.personal.pojo.PeopleHistoryExample;import net.linxingyang.personal.qo.PeopleHistoryQo;import net.linxingyang.personal.service.PeopleHistoryService;import net.linxingyang.personal.vo.PeopleHistoryVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("peopleHistoryService")public class PeopleHistoryServiceImpl implements PeopleHistoryService {    private static Logger log = LoggerFactory.getLogger(PeopleHistoryServiceImpl.class);    @Autowired    private PeopleHistoryMapper peopleHistoryMapper;    @Autowired    private PeopleHistoryCustomMapper peopleHistoryCustomMapper;    @Override    public void insert(PeopleHistory peopleHistory) throws Exception {        peopleHistory.setCreateDate(new Date());        peopleHistoryMapper.insert(peopleHistory);    }        @Override    public void update(PeopleHistory peopleHistory) throws Exception {        peopleHistory.setModifyDate(new Date());        // peopleHistoryMapper.updateByPrimaryKeyWithBLOBs(peopleHistory);        // peopleHistoryMapper.update        peopleHistoryMapper.updateByPrimaryKeySelective(peopleHistory);    }        @Override    public void delete(Integer id) throws Exception {        peopleHistoryMapper.deleteByPrimaryKey(id);    }        @Override    public List<PeopleHistory> selectAll() throws Exception {        return peopleHistoryMapper.selectByExample(null);    }        @Override    public List<PeopleHistory> selectByExample(PeopleHistoryExample qo) throws Exception {        return peopleHistoryMapper.selectByExample(qo);    }        @Override    public PeopleHistory selectById(Integer id) throws Exception {        return peopleHistoryMapper.selectByPrimaryKey(id);    }            @Override    public PeopleHistoryVo selectVoById(Integer id) throws Exception {        PeopleHistory peopleHistory = peopleHistoryMapper.selectByPrimaryKey(id);        // PeopleHistory peopleHistory = peopleHistoryMapper.selectByExampleWithBLOBs(example)(id);        if (null != peopleHistory) {            return pojoToVo(peopleHistory);        }        return null;    }        @Override    public PageBean<PeopleHistoryVo> selectByQo(PeopleHistoryQo qo) throws Exception {        PageBean<PeopleHistoryVo> pageBean = new PageBean<PeopleHistoryVo>();                         return pageBean;     }        @Override    public LightPageBean<PeopleHistoryVo> selectByQo2(PeopleHistoryQo qo) throws Exception {        LightPageBean<PeopleHistoryVo> lightPageBean = new LightPageBean<PeopleHistoryVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                PeopleHistoryExample peopleHistoryExample = new PeopleHistoryExample();        PeopleHistoryExample.Criteria condition = peopleHistoryExample.createCriteria();                lightPageBean.setCount(peopleHistoryMapper.countByExample(peopleHistoryExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<PeopleHistoryVo>());            return lightPageBean;        }                peopleHistoryExample.setOffset(lightPageBean.getFromIndex());        peopleHistoryExample.setLimit(lightPageBean.getLimit());        peopleHistoryExample.setOrderByClause(qo.getOrderBy());                List<PeopleHistory> peopleHistorys = peopleHistoryMapper.selectByExample(peopleHistoryExample);        lightPageBean.setData(PeopleHistoryServiceImpl.pojoToVo(peopleHistorys));                return lightPageBean;     }            private static PeopleHistoryVo pojoToVo(PeopleHistory peopleHistory) throws Exception {        PeopleHistoryVo peopleHistoryVo = new PeopleHistoryVo();        BeanCopyUtils.copy(peopleHistory, peopleHistoryVo);        return peopleHistoryVo;    }    private static List<PeopleHistoryVo> pojoToVo(List<PeopleHistory> peopleHistorys) throws Exception {        List<PeopleHistoryVo> peopleHistoryVos = new ArrayList<PeopleHistoryVo>();        for (PeopleHistory d : peopleHistorys) {            peopleHistoryVos.add(PeopleHistoryServiceImpl.pojoToVo(d));        }        return peopleHistoryVos;    }        @Override	public PeopleHistory selectByPersonId(Integer personId) throws Exception {    	PeopleHistoryExample peopleHistoryExample = new PeopleHistoryExample();    	peopleHistoryExample.or().andPersonIdEqualTo(personId);    	    	List<PeopleHistory> peopleHistoryLists = peopleHistoryMapper.selectByExample(peopleHistoryExample);    	if (1 != peopleHistoryLists.size()) {    		return null;    	}		return peopleHistoryLists.get(0);	}	@Override	public PeopleHistory selectByPersonIdWithBLOBs(Integer personId) throws Exception {		PeopleHistoryExample peopleHistoryExample = new PeopleHistoryExample();    	peopleHistoryExample.or().andPersonIdEqualTo(personId);    	    	List<PeopleHistory> peopleHistoryLists = peopleHistoryMapper.selectByExampleWithBLOBs(peopleHistoryExample);    	if (1 != peopleHistoryLists.size()) {    		return null;    	}		return peopleHistoryLists.get(0);	}	public PeopleHistoryMapper getPeopleHistoryMapper() {        return peopleHistoryMapper;    }    public void setPeopleHistoryMapper(PeopleHistoryMapper peopleHistoryMapper) {        this.peopleHistoryMapper = peopleHistoryMapper;    }    public PeopleHistoryCustomMapper getPeopleHistoryCustomMapper() {        return peopleHistoryCustomMapper;    }    public void setPeopleHistoryCustomMapper(PeopleHistoryCustomMapper peopleHistoryCustomMapper) {        this.peopleHistoryCustomMapper = peopleHistoryCustomMapper;    }}