package net.linxingyang.personal.service.impl;import java.util.ArrayList;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.vo.ResponseCode;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Date;import net.linxingyang.personal.mapper.LongTermTaskCustomMapper;import net.linxingyang.personal.mapper.LongTermTaskMapper;import net.linxingyang.personal.pojo.LongTermTask;import net.linxingyang.personal.pojo.LongTermTaskExample;import net.linxingyang.personal.qo.LongTermTaskQo;import net.linxingyang.personal.service.LongTermTaskService;import net.linxingyang.personal.vo.LongTermTaskVo;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;import org.springframework.stereotype.Service;@Service("longTermTaskService")public class LongTermTaskServiceImpl implements LongTermTaskService {    private static Logger log = LoggerFactory.getLogger(LongTermTaskServiceImpl.class);    @Autowired    private LongTermTaskMapper longTermTaskMapper;    @Autowired    private LongTermTaskCustomMapper longTermTaskCustomMapper;    @Override    public void insert(LongTermTask longTermTask) throws Exception {        longTermTask.setCreateDate(new Date());        longTermTaskMapper.insert(longTermTask);    }        @Override    public void update(LongTermTask longTermTask) throws Exception {        longTermTask.setModifyDate(new Date());        longTermTaskMapper.updateByPrimaryKeySelective(longTermTask);    }        @Override    public void delete(Integer id) throws Exception {        longTermTaskMapper.deleteByPrimaryKey(id);    }        @Override    public List<LongTermTask> selectAll() throws Exception {        return longTermTaskMapper.selectByExample(null);    }        @Override    public List<LongTermTask> selectByExample(LongTermTaskExample qo) throws Exception {        return longTermTaskMapper.selectByExample(qo);    }        @Override    public LongTermTask selectById(Integer id) throws Exception {        return longTermTaskMapper.selectByPrimaryKey(id);    }            @Override    public LongTermTaskVo selectVoById(Integer id) throws Exception {        LongTermTask longTermTask = longTermTaskMapper.selectByPrimaryKey(id);        if (null != longTermTask) {            return pojoToVo(longTermTask);        }        return null;            }        @Override    public PageBean<LongTermTaskVo> selectByQo(LongTermTaskQo qo) throws Exception {        PageBean<LongTermTaskVo> pageBean = new PageBean<LongTermTaskVo>();                         return pageBean;     }        @Override    public LightPageBean<LongTermTaskVo> selectByQo2(LongTermTaskQo qo) throws Exception {        LightPageBean<LongTermTaskVo> lightPageBean = new LightPageBean<LongTermTaskVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                LongTermTaskExample longTermTaskExample = new LongTermTaskExample();        LongTermTaskExample.Criteria condition = longTermTaskExample.createCriteria();                lightPageBean.setCount(longTermTaskMapper.countByExample(longTermTaskExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<LongTermTaskVo>());            return lightPageBean;        }                longTermTaskExample.setOffset(lightPageBean.getFromIndex());        longTermTaskExample.setLimit(lightPageBean.getLimit());        longTermTaskExample.setOrderByClause(qo.getOrderBy());                List<LongTermTask> longTermTasks = longTermTaskMapper.selectByExample(longTermTaskExample);        lightPageBean.setData(LongTermTaskServiceImpl.pojoToVo(longTermTasks));                return lightPageBean;     }            private static LongTermTaskVo pojoToVo(LongTermTask longTermTask) throws Exception {        LongTermTaskVo longTermTaskVo = new LongTermTaskVo();        BeanCopyUtils.copy(longTermTask, longTermTaskVo);        return longTermTaskVo;    }    private static List<LongTermTaskVo> pojoToVo(List<LongTermTask> longTermTasks) throws Exception {        List<LongTermTaskVo> longTermTaskVos = new ArrayList<LongTermTaskVo>();        for (LongTermTask d : longTermTasks) {            longTermTaskVos.add(LongTermTaskServiceImpl.pojoToVo(d));        }        return longTermTaskVos;    }    public LongTermTaskMapper getLongTermTaskMapper() {        return longTermTaskMapper;    }    public void setLongTermTaskMapper(LongTermTaskMapper longTermTaskMapper) {        this.longTermTaskMapper = longTermTaskMapper;    }    public LongTermTaskCustomMapper getLongTermTaskCustomMapper() {        return longTermTaskCustomMapper;    }    public void setLongTermTaskCustomMapper(LongTermTaskCustomMapper longTermTaskCustomMapper) {        this.longTermTaskCustomMapper = longTermTaskCustomMapper;    }}