package net.linxingyang.personal.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.mapper.PersonCustomMapper;import net.linxingyang.personal.mapper.PersonMapper;import net.linxingyang.personal.pojo.Person;import net.linxingyang.personal.pojo.PersonExample;import net.linxingyang.personal.qo.PersonQo;import net.linxingyang.personal.service.PeopleHistoryService;import net.linxingyang.personal.service.PersonService;import net.linxingyang.personal.vo.PersonVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("personService")public class PersonServiceImpl implements PersonService {    private static Logger log = LoggerFactory.getLogger(PersonServiceImpl.class);    @Autowired    private PersonMapper personMapper;    @Autowired    private PersonCustomMapper personCustomMapper;    @Autowired    private PeopleHistoryService peopleHistoryService;            @Override    public void insert(Person person) throws Exception {        person.setCreateDate(new Date());        personMapper.insert(person);    }        @Override    public void update(Person person) throws Exception {        person.setModifyDate(new Date());        personMapper.updateByPrimaryKeySelective(person);    }        @Override    public void delete(Integer id) throws Exception {        personMapper.deleteByPrimaryKey(id);    }        @Override    public List<Person> selectAll() throws Exception {        return personMapper.selectByExample(null);    }        @Override    public List<Person> selectByExample(PersonExample qo) throws Exception {        return personMapper.selectByExample(qo);    }        @Override    public Person selectById(Integer id) throws Exception {        return personMapper.selectByPrimaryKey(id);    }            @Override    public PersonVo selectVoById(Integer id) throws Exception {        Person person = personMapper.selectByPrimaryKey(id);        if (null != person) {            return pojoToVo(person);        }        return null;            }        @Override    public PageBean<PersonVo> selectByQo(PersonQo qo) throws Exception {        PageBean<PersonVo> pageBean = new PageBean<PersonVo>();                         return pageBean;     }        @Override    public LightPageBean<PersonVo> selectByQo2(PersonQo qo) throws Exception {        LightPageBean<PersonVo> lightPageBean = new LightPageBean<PersonVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                PersonExample personExample = new PersonExample();        PersonExample.Criteria condition = personExample.createCriteria();                if (null != qo.getName()) {        	condition.andNameLike("%" + qo.getName() + "%");        }        if (null != qo.getSex() && -1 != qo.getSex()) {        	condition.andSexEqualTo(qo.getSex());        }                lightPageBean.setCount(personMapper.countByExample(personExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<PersonVo>());            return lightPageBean;        }                personExample.setOffset(lightPageBean.getFromIndex());        personExample.setLimit(lightPageBean.getLimit());        personExample.setOrderByClause(qo.getOrderBy());                List<Person> persons = personMapper.selectByExample(personExample);        lightPageBean.setData(PersonServiceImpl.pojoToVo(persons));                        otherProperties(lightPageBean.getData());                return lightPageBean;     }            /**     * 其他属性的封装     *      * @param personVos     * @throws Exception     */    private void otherProperties(List<PersonVo> personVos) throws Exception{    	for (PersonVo vo : personVos) {    		// 是否存在人物小传    		if (null != peopleHistoryService.selectByPersonId(vo.getId())) {    			vo.setExistsPeopleHistory(true);    		}    	}    }            private static PersonVo pojoToVo(Person person) throws Exception {        PersonVo personVo = new PersonVo();        BeanCopyUtils.copy(person, personVo);        return personVo;    }    private static List<PersonVo> pojoToVo(List<Person> persons) throws Exception {        List<PersonVo> personVos = new ArrayList<PersonVo>();        for (Person d : persons) {            personVos.add(PersonServiceImpl.pojoToVo(d));        }        return personVos;    }    public PersonMapper getPersonMapper() {        return personMapper;    }    public void setPersonMapper(PersonMapper personMapper) {        this.personMapper = personMapper;    }    public PersonCustomMapper getPersonCustomMapper() {        return personCustomMapper;    }    public void setPersonCustomMapper(PersonCustomMapper personCustomMapper) {        this.personCustomMapper = personCustomMapper;    }}