package net.linxingyang.personal.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.mapper.PersonWordCustomMapper;import net.linxingyang.personal.mapper.PersonWordMapper;import net.linxingyang.personal.pojo.PersonWord;import net.linxingyang.personal.pojo.PersonWordExample;import net.linxingyang.personal.qo.PersonWordQo;import net.linxingyang.personal.service.PersonWordService;import net.linxingyang.personal.vo.PersonWordVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("personWordService")public class PersonWordServiceImpl implements PersonWordService {    private static Logger log = LoggerFactory.getLogger(PersonWordServiceImpl.class);    @Autowired    private PersonWordMapper personWordMapper;    @Autowired    private PersonWordCustomMapper personWordCustomMapper;    @Override    public void insert(PersonWord personWord) throws Exception {        personWord.setCreateDate(new Date());        personWordMapper.insert(personWord);    }        @Override    public void update(PersonWord personWord) throws Exception {        personWord.setModifyDate(new Date());        personWordMapper.updateByPrimaryKeySelective(personWord);    }        @Override    public void delete(Integer id) throws Exception {        personWordMapper.deleteByPrimaryKey(id);    }        @Override    public List<PersonWord> selectAll() throws Exception {        return personWordMapper.selectByExample(null);    }        @Override    public List<PersonWord> selectByExample(PersonWordExample qo) throws Exception {        return personWordMapper.selectByExample(qo);    }        @Override    public PersonWord selectById(Integer id) throws Exception {        return personWordMapper.selectByPrimaryKey(id);    }            @Override    public PersonWordVo selectVoById(Integer id) throws Exception {        PersonWord personWord = personWordMapper.selectByPrimaryKey(id);        if (null != personWord) {            return pojoToVo(personWord);        }        return null;            }        @Override    public PageBean<PersonWordVo> selectByQo(PersonWordQo qo) throws Exception {        PageBean<PersonWordVo> pageBean = new PageBean<PersonWordVo>();                         return pageBean;     }        @Override    public LightPageBean<PersonWordVo> selectByQo2(PersonWordQo qo) throws Exception {        LightPageBean<PersonWordVo> lightPageBean = new LightPageBean<PersonWordVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                PersonWordExample personWordExample = new PersonWordExample();        PersonWordExample.Criteria condition = personWordExample.createCriteria();                if (null != qo.getPersonId()) {        	condition.andPersonIdEqualTo(qo.getPersonId());        }                lightPageBean.setCount(personWordMapper.countByExample(personWordExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<PersonWordVo>());            return lightPageBean;        }                personWordExample.setOffset(lightPageBean.getFromIndex());        personWordExample.setLimit(lightPageBean.getLimit());        personWordExample.setOrderByClause(qo.getOrderBy());                List<PersonWord> personWords = personWordMapper.selectByExample(personWordExample);        lightPageBean.setData(PersonWordServiceImpl.pojoToVo(personWords));                return lightPageBean;     }            private static PersonWordVo pojoToVo(PersonWord personWord) throws Exception {        PersonWordVo personWordVo = new PersonWordVo();        BeanCopyUtils.copy(personWord, personWordVo);        return personWordVo;    }    private static List<PersonWordVo> pojoToVo(List<PersonWord> personWords) throws Exception {        List<PersonWordVo> personWordVos = new ArrayList<PersonWordVo>();        for (PersonWord d : personWords) {            personWordVos.add(PersonWordServiceImpl.pojoToVo(d));        }        return personWordVos;    }    public PersonWordMapper getPersonWordMapper() {        return personWordMapper;    }    public void setPersonWordMapper(PersonWordMapper personWordMapper) {        this.personWordMapper = personWordMapper;    }    public PersonWordCustomMapper getPersonWordCustomMapper() {        return personWordCustomMapper;    }    public void setPersonWordCustomMapper(PersonWordCustomMapper personWordCustomMapper) {        this.personWordCustomMapper = personWordCustomMapper;    }}