package net.linxingyang.personal.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.mapper.BigThingCustomMapper;import net.linxingyang.personal.mapper.BigThingMapper;import net.linxingyang.personal.pojo.BigThing;import net.linxingyang.personal.pojo.BigThingExample;import net.linxingyang.personal.qo.BigThingQo;import net.linxingyang.personal.service.BigThingService;import net.linxingyang.personal.vo.BigThingVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("bigThingService")public class BigThingServiceImpl implements BigThingService {    private static Logger log = LoggerFactory.getLogger(BigThingServiceImpl.class);    @Autowired    private BigThingMapper bigThingMapper;    @Autowired    private BigThingCustomMapper bigThingCustomMapper;    @Override    public void insert(BigThing bigThing) throws Exception {        bigThing.setCreateDate(new Date());        bigThingMapper.insert(bigThing);    }        @Override    public void update(BigThing bigThing) throws Exception {        bigThing.setModifyDate(new Date());        bigThingMapper.updateByPrimaryKeySelective(bigThing);    }        @Override    public void delete(Integer id) throws Exception {        bigThingMapper.deleteByPrimaryKey(id);    }        @Override    public List<BigThing> selectAll() throws Exception {        return bigThingMapper.selectByExample(null);    }        @Override    public List<BigThing> selectByExample(BigThingExample qo) throws Exception {        return bigThingMapper.selectByExample(qo);    }        @Override    public BigThing selectById(Integer id) throws Exception {        return bigThingMapper.selectByPrimaryKey(id);    }            @Override    public BigThingVo selectVoById(Integer id) throws Exception {        BigThing bigThing = bigThingMapper.selectByPrimaryKey(id);        if (null != bigThing) {            return pojoToVo(bigThing);        }        return null;            }        @Override    public PageBean<BigThingVo> selectByQo(BigThingQo qo) throws Exception {        PageBean<BigThingVo> pageBean = new PageBean<BigThingVo>();                         return pageBean;     }        @Override    public LightPageBean<BigThingVo> selectByQo2(BigThingQo qo) throws Exception {        LightPageBean<BigThingVo> lightPageBean = new LightPageBean<BigThingVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                BigThingExample bigThingExample = new BigThingExample();        BigThingExample.Criteria condition = bigThingExample.createCriteria();                if (null != qo.getType() && -1 != qo.getType()) {        	condition.andTypeEqualTo(qo.getType());        }                lightPageBean.setCount(bigThingMapper.countByExample(bigThingExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<BigThingVo>());            return lightPageBean;        }                // bigThingExample.setOffset(lightPageBean.getFromIndex());        // bigThingExample.setLimit(lightPageBean.getLimit());        bigThingExample.setOrderByClause(qo.getOrderBy());                List<BigThing> bigThings = bigThingMapper.selectByExample(bigThingExample);        lightPageBean.setData(BigThingServiceImpl.pojoToVo(bigThings));                return lightPageBean;     }            private static BigThingVo pojoToVo(BigThing bigThing) throws Exception {        BigThingVo bigThingVo = new BigThingVo();        BeanCopyUtils.copy(bigThing, bigThingVo);        return bigThingVo;    }    private static List<BigThingVo> pojoToVo(List<BigThing> bigThings) throws Exception {        List<BigThingVo> bigThingVos = new ArrayList<BigThingVo>();        for (BigThing d : bigThings) {            bigThingVos.add(BigThingServiceImpl.pojoToVo(d));        }        return bigThingVos;    }    public BigThingMapper getBigThingMapper() {        return bigThingMapper;    }    public void setBigThingMapper(BigThingMapper bigThingMapper) {        this.bigThingMapper = bigThingMapper;    }    public BigThingCustomMapper getBigThingCustomMapper() {        return bigThingCustomMapper;    }    public void setBigThingCustomMapper(BigThingCustomMapper bigThingCustomMapper) {        this.bigThingCustomMapper = bigThingCustomMapper;    }}