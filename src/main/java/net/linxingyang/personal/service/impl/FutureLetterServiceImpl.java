package net.linxingyang.personal.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.mapper.FutureLetterCustomMapper;import net.linxingyang.personal.mapper.FutureLetterMapper;import net.linxingyang.personal.pojo.FutureLetter;import net.linxingyang.personal.pojo.FutureLetterExample;import net.linxingyang.personal.qo.FutureLetterQo;import net.linxingyang.personal.service.FutureLetterService;import net.linxingyang.personal.vo.FutureLetterVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("futureLetterService")public class FutureLetterServiceImpl implements FutureLetterService {    private static Logger log = LoggerFactory.getLogger(FutureLetterServiceImpl.class);    @Autowired    private FutureLetterMapper futureLetterMapper;    @Autowired    private FutureLetterCustomMapper futureLetterCustomMapper;    @Override    public void insert(FutureLetter futureLetter) throws Exception {        futureLetter.setCreateDate(new Date());        futureLetterMapper.insert(futureLetter);    }        @Override    public void update(FutureLetter futureLetter) throws Exception {        futureLetter.setModifyDate(new Date());        futureLetterMapper.updateByPrimaryKeySelective(futureLetter);    }        @Override    public void delete(Integer id) throws Exception {        futureLetterMapper.deleteByPrimaryKey(id);    }        @Override    public List<FutureLetter> selectAll() throws Exception {        return futureLetterMapper.selectByExample(null);    }        @Override    public List<FutureLetter> selectByExample(FutureLetterExample qo) throws Exception {        return futureLetterMapper.selectByExample(qo);    }        @Override    public FutureLetter selectById(Integer id) throws Exception {        return futureLetterMapper.selectByPrimaryKey(id);    }            @Override    public FutureLetterVo selectVoById(Integer id) throws Exception {    	FutureLetterExample example = new FutureLetterExample();    	example.or().andIdEqualTo(id);    	List<FutureLetter> letters = futureLetterMapper.selectByExampleWithBLOBs(example);    	if (1 != letters.size()) {    		return null;     	}        // FutureLetter futureLetter = futureLetterMapper.selectByExampleWithBLOBs(example)(id);        return pojoToVo(letters.get(0));    }        @Override    public PageBean<FutureLetterVo> selectByQo(FutureLetterQo qo) throws Exception {        PageBean<FutureLetterVo> pageBean = new PageBean<FutureLetterVo>();                         return pageBean;     }        @Override    public LightPageBean<FutureLetterVo> selectByQo2(FutureLetterQo qo) throws Exception {        LightPageBean<FutureLetterVo> lightPageBean = new LightPageBean<FutureLetterVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                FutureLetterExample futureLetterExample = new FutureLetterExample();        FutureLetterExample.Criteria condition = futureLetterExample.createCriteria();                lightPageBean.setCount(futureLetterMapper.countByExample(futureLetterExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<FutureLetterVo>());            return lightPageBean;        }                // futureLetterExample.setOffset(lightPageBean.getFromIndex());        // futureLetterExample.setLimit(lightPageBean.getLimit());        futureLetterExample.setOrderByClause(qo.getOrderBy());                List<FutureLetter> futureLetters = futureLetterMapper.selectByExample(futureLetterExample);        lightPageBean.setData(FutureLetterServiceImpl.pojoToVo(futureLetters));                return lightPageBean;     }            private static FutureLetterVo pojoToVo(FutureLetter futureLetter) throws Exception {        FutureLetterVo futureLetterVo = new FutureLetterVo();        BeanCopyUtils.copy(futureLetter, futureLetterVo);        return futureLetterVo;    }    private static List<FutureLetterVo> pojoToVo(List<FutureLetter> futureLetters) throws Exception {        List<FutureLetterVo> futureLetterVos = new ArrayList<FutureLetterVo>();        for (FutureLetter d : futureLetters) {            futureLetterVos.add(FutureLetterServiceImpl.pojoToVo(d));        }        return futureLetterVos;    }    public FutureLetterMapper getFutureLetterMapper() {        return futureLetterMapper;    }    public void setFutureLetterMapper(FutureLetterMapper futureLetterMapper) {        this.futureLetterMapper = futureLetterMapper;    }    public FutureLetterCustomMapper getFutureLetterCustomMapper() {        return futureLetterCustomMapper;    }    public void setFutureLetterCustomMapper(FutureLetterCustomMapper futureLetterCustomMapper) {        this.futureLetterCustomMapper = futureLetterCustomMapper;    }}