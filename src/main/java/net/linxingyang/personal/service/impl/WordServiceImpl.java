package net.linxingyang.personal.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.mapper.WordCustomMapper;import net.linxingyang.personal.mapper.WordMapper;import net.linxingyang.personal.pojo.Word;import net.linxingyang.personal.pojo.WordExample;import net.linxingyang.personal.qo.WordQo;import net.linxingyang.personal.service.WordService;import net.linxingyang.personal.vo.WordVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("wordService")public class WordServiceImpl implements WordService {    private static Logger log = LoggerFactory.getLogger(WordServiceImpl.class);    @Autowired    private WordMapper wordMapper;    @Autowired    private WordCustomMapper wordCustomMapper;    @Override    public void insert(Word word) throws Exception {        word.setCreateDate(new Date());        wordMapper.insert(word);    }        @Override    public void update(Word word) throws Exception {        word.setModifyDate(new Date());        wordMapper.updateByPrimaryKeySelective(word);    }        @Override    public void delete(Integer id) throws Exception {        wordMapper.deleteByPrimaryKey(id);    }        @Override    public List<Word> selectAll() throws Exception {        return wordMapper.selectByExample(null);    }        @Override    public List<Word> selectByExample(WordExample qo) throws Exception {        return wordMapper.selectByExample(qo);    }        @Override    public Word selectById(Integer id) throws Exception {        return wordMapper.selectByPrimaryKey(id);    }            @Override    public WordVo selectVoById(Integer id) throws Exception {        Word word = wordMapper.selectByPrimaryKey(id);        if (null != word) {            return pojoToVo(word);        }        return null;            }        @Override    public PageBean<WordVo> selectByQo(WordQo qo) throws Exception {        PageBean<WordVo> pageBean = new PageBean<WordVo>();                         return pageBean;     }        @Override    public LightPageBean<WordVo> selectByQo2(WordQo qo) throws Exception {        LightPageBean<WordVo> lightPageBean = new LightPageBean<WordVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                WordExample wordExample = new WordExample();        WordExample.Criteria condition = wordExample.createCriteria();                if (null != qo.getWord()) {        	condition.andWordLike("%" + qo.getWord() + "%");        }        if (null != qo.getDiscard()) {    		if (-1 != qo.getDiscard()) {    			// -1表示查询全部，即不包括此条件    			condition.andDiscardEqualTo(qo.getDiscard());    		}    	}                lightPageBean.setCount(wordMapper.countByExample(wordExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<WordVo>());            return lightPageBean;        }                // wordExample.setOffset(lightPageBean.getFromIndex());        // wordExample.setLimit(lightPageBean.getLimit());        wordExample.setOrderByClause(qo.getOrderBy());                List<Word> words = wordMapper.selectByExample(wordExample);        lightPageBean.setData(WordServiceImpl.pojoToVo(words));                return lightPageBean;     }            private static WordVo pojoToVo(Word word) throws Exception {        WordVo wordVo = new WordVo();        BeanCopyUtils.copy(word, wordVo);        return wordVo;    }    private static List<WordVo> pojoToVo(List<Word> words) throws Exception {        List<WordVo> wordVos = new ArrayList<WordVo>();        for (Word d : words) {            wordVos.add(WordServiceImpl.pojoToVo(d));        }        return wordVos;    }    public WordMapper getWordMapper() {        return wordMapper;    }    public void setWordMapper(WordMapper wordMapper) {        this.wordMapper = wordMapper;    }    public WordCustomMapper getWordCustomMapper() {        return wordCustomMapper;    }    public void setWordCustomMapper(WordCustomMapper wordCustomMapper) {        this.wordCustomMapper = wordCustomMapper;    }}