package net.linxingyang.personal.controller;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.vo.CommonVo;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.exception.PersonalException;import net.linxingyang.personal.pojo.PeopleHistory;import net.linxingyang.personal.qo.PeopleHistoryQo;import net.linxingyang.personal.service.PeopleHistoryService;import net.linxingyang.personal.vo.PeopleHistoryVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(value="peopleHistory")public class PeopleHistoryController {    private static Logger log = LoggerFactory.getLogger(PeopleHistoryController.class);    @Autowired    private PeopleHistoryService peopleHistoryService;    /**     * 查询人物小传列表     *      * @param qo     * @return     */    @RequestMapping("/listPeopleHistory")    public @ResponseBody LightPageBean<PeopleHistoryVo> listPeopleHistory(PeopleHistoryQo qo) {        LightPageBean<PeopleHistoryVo> vo = new LightPageBean<PeopleHistoryVo>();                 try {            vo = peopleHistoryService.selectByQo2(qo);            vo.setCode(ResponseCode.SUCCESS);            vo.setMsg("查询人物小传成功!");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMsg(e.getMessage());            log.info("查询人物小传失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMsg("内部错误!");            log.info("查询人物小传失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }    /**     * 查询人物小传     *      * @param id      * @return     */    @RequestMapping("/queryPeopleHistory")    public @ResponseBody CommonVo queryPeopleHistory(Integer personId) {        CommonVo vo = new CommonVo();                try {            vo.setResultObject(peopleHistoryService.selectByPersonIdWithBLOBs(personId));            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("查询人物小传成功!");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("查询人物小传失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("查询人物小传失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }        /**     * 更新人物小传     *      * @param peopleHistory     * @return     */    @RequestMapping("/modifyPeopleHistory")    public @ResponseBody CommonVo modifyPeopleHistory(PeopleHistory peopleHistory) {        CommonVo vo = new CommonVo();                try {            peopleHistoryService.update(peopleHistory);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("更新人物小传成功!");            log.info("更新人物小传成功");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("更新人物小传失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("更新人物小传失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }    /**     * 添加人物小传     *      * @param peopleHistory 人物小传     * @return CommonVo 处理结果     */    @RequestMapping("/addPeopleHistory")    public @ResponseBody CommonVo addPeopleHistory(PeopleHistory peopleHistory) {        CommonVo vo = new CommonVo();                try {            peopleHistoryService.insert(peopleHistory);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("添加人物小传成功!");            log.info("添加人物小传成功");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("添加人物小传失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("添加人物小传失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }}