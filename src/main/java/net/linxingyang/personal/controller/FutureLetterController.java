package net.linxingyang.personal.controller;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.vo.CommonVo;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.personal.exception.PersonalException;import net.linxingyang.personal.pojo.FutureLetter;import net.linxingyang.personal.qo.FutureLetterQo;import net.linxingyang.personal.service.FutureLetterService;import net.linxingyang.personal.vo.FutureLetterVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(value="futureLetter")public class FutureLetterController {    private static Logger log = LoggerFactory.getLogger(FutureLetterController.class);    @Autowired    private FutureLetterService futureLetterService;    /**     * 查询未来一封信列表     *      * @param qo     * @return     */    @RequestMapping("/listFutureLetter")    public @ResponseBody LightPageBean<FutureLetterVo> listFutureLetter(FutureLetterQo qo) {        LightPageBean<FutureLetterVo> vo = new LightPageBean<FutureLetterVo>();                 try {            vo = futureLetterService.selectByQo2(qo);            vo.setCode(ResponseCode.SUCCESS);            vo.setMsg("查询未来一封信成功!");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMsg(e.getMessage());            log.info("查询未来一封信失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMsg("内部错误!");            log.info("查询未来一封信失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }    /**     * 查询未来一封信     *      * @param id      * @return     */    @RequestMapping("/queryFutureLetter")    public @ResponseBody CommonVo queryFutureLetter(Integer id) {        CommonVo vo = new CommonVo();                try {            vo.setResultObject(futureLetterService.selectVoById(id));            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("查询未来一封信成功!");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("查询未来一封信失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("查询未来一封信失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }        /**     * 更新未来一封信     *      * @param futureLetter     * @return     */    @RequestMapping("/modifyFutureLetter")    public @ResponseBody CommonVo modifyFutureLetter(FutureLetter futureLetter) {        CommonVo vo = new CommonVo();                try {            futureLetterService.update(futureLetter);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("更新未来一封信成功!");            log.info("更新未来一封信成功");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("更新未来一封信失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("更新未来一封信失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }    /**     * 添加未来一封信     *      * @param futureLetter 未来一封信     * @return CommonVo 处理结果     */    @RequestMapping("/addFutureLetter")    public @ResponseBody CommonVo addFutureLetter(FutureLetter futureLetter) {        CommonVo vo = new CommonVo();                try {            futureLetterService.insert(futureLetter);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("添加未来一封信成功!");            log.info("添加未来一封信成功");        } catch (PersonalException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("添加未来一封信失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("添加未来一封信失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }}