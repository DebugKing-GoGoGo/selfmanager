package net.linxingyang.config.controller;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.vo.CommonVo;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.config.exception.ConfigException;import net.linxingyang.config.pojo.Config;import net.linxingyang.config.qo.ConfigQo;import net.linxingyang.config.service.ConfigService;import net.linxingyang.config.vo.ConfigVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(value="config")public class ConfigController {    private static Logger log = LoggerFactory.getLogger(ConfigController.class);    @Autowired    private ConfigService configService;        /**     * 查询配置列表键值对     * propertyId作为键，propertValue作为值     *      * @param qo     * @return     */        @RequestMapping("/listConfigPropertyIdAndPropertyValue")    public @ResponseBody CommonVo listConfigPropertyIdAndPropertyValue(ConfigQo qo) {                 CommonVo vo = new CommonVo();        try {        	        	LightPageBean<ConfigVo> pageBean = configService.selectByQo2(qo);                   	Map<String, String> propertyIdAndValue = new HashMap<String, String>();            Iterator<ConfigVo> iterator = pageBean.getData().iterator();            while (iterator.hasNext()) {            	ConfigVo configVo = iterator.next();            	propertyIdAndValue.put(configVo.getPropertyId(), configVo.getPropertyValue());            }                        vo.setResultObject(propertyIdAndValue);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("查询配置成功!");        } catch (ConfigException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("查询配置失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("查询配置失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }    /**     * 查询配置列表     *      * @param qo     * @return     */    @RequestMapping("/listConfig")    public @ResponseBody LightPageBean<ConfigVo> listConfig(ConfigQo qo) {    	LightPageBean<ConfigVo> vo = new LightPageBean<ConfigVo>();     	    	try {    		vo = configService.selectByQo2(qo);    		vo.setCode(ResponseCode.SUCCESS);    		vo.setMsg("查询配置成功!");    	} catch (ConfigException e) {    		vo.setCode(ResponseCode.ERROR_INPUT);    		vo.setMsg(e.getMessage());    		log.info("查询配置失败：" + vo.getCode() + ":" + e.getMessage());    	} catch (Exception e) {    		vo.setCode(ResponseCode.INTERNAL_ERROR);    		vo.setMsg("内部错误!");    		log.info("查询配置失败：" + vo.getCode() + "：" + e.getMessage());    	}    	return vo;    }        /**     * 查询配置     *      * @param id      * @return     */    @RequestMapping("/queryConfig")    public @ResponseBody CommonVo queryConfig(Integer id) {        CommonVo vo = new CommonVo();                try {            vo.setResultObject(configService.selectVoById(id));            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("查询配置成功!");        } catch (ConfigException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("查询配置失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("查询配置失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }        /**     * 更新配置     *      * @param config     * @return     */    @RequestMapping("/modifyConfig")    public @ResponseBody CommonVo modifyConfig(Config config) {        CommonVo vo = new CommonVo();                try {            configService.update(config);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("更新配置成功!");            log.info("更新配置成功");        } catch (ConfigException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("更新配置失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("更新配置失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }    /**     * 添加配置     *      * @param config 配置     * @return CommonVo 处理结果     */    @RequestMapping("/addConfig")    public @ResponseBody CommonVo addConfig(Config config) {        CommonVo vo = new CommonVo();                try {            configService.insert(config);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("添加配置成功!");            log.info("添加配置成功");        } catch (ConfigException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("添加配置失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("添加配置失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }}