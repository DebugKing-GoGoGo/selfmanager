package net.linxingyang.config.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.config.mapper.ConfigCustomMapper;import net.linxingyang.config.mapper.ConfigMapper;import net.linxingyang.config.pojo.Config;import net.linxingyang.config.pojo.ConfigExample;import net.linxingyang.config.qo.ConfigQo;import net.linxingyang.config.service.ConfigService;import net.linxingyang.config.vo.ConfigVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("configService")public class ConfigServiceImpl implements ConfigService {    private static Logger log = LoggerFactory.getLogger(ConfigServiceImpl.class);    @Autowired    private ConfigMapper configMapper;    @Autowired    private ConfigCustomMapper configCustomMapper;    @Override    public void insert(Config config) throws Exception {        config.setCreateDate(new Date());        configMapper.insert(config);    }        @Override    public void update(Config config) throws Exception {        config.setModifyDate(new Date());        configMapper.updateByPrimaryKeySelective(config);    }        @Override    public void delete(Integer id) throws Exception {        configMapper.deleteByPrimaryKey(id);    }        @Override    public List<Config> selectAll() throws Exception {        return configMapper.selectByExample(null);    }        @Override    public List<Config> selectByExample(ConfigExample qo) throws Exception {        return configMapper.selectByExample(qo);    }        @Override    public Config selectById(Integer id) throws Exception {        return configMapper.selectByPrimaryKey(id);    }            @Override    public ConfigVo selectVoById(Integer id) throws Exception {        Config config = configMapper.selectByPrimaryKey(id);        if (null != config) {            return pojoToVo(config);        }        return null;            }        @Override    public PageBean<ConfigVo> selectByQo(ConfigQo qo) throws Exception {        PageBean<ConfigVo> pageBean = new PageBean<ConfigVo>();                         return pageBean;     }        @Override    public LightPageBean<ConfigVo> selectByQo2(ConfigQo qo) throws Exception {        LightPageBean<ConfigVo> lightPageBean = new LightPageBean<ConfigVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                ConfigExample configExample = new ConfigExample();        ConfigExample.Criteria condition = configExample.createCriteria();                // 查询条件        if (null != qo.getId()) {        	condition.andIdEqualTo(qo.getId());        }        if (null != qo.getType()) {        	boolean typeEmpty = "".equals(qo.getType().trim());        	if (!typeEmpty) {        		condition.andTypeEqualTo(qo.getType());        	}        }        if (null != qo.getTypeName()) {        	condition.andTypeNameEqualTo(qo.getTypeName());        }        if (null != qo.getGroupId()) {        	condition.andGroupIdEqualTo(qo.getGroupId());        }        if (null != qo.getGroupName()) {        	condition.andGroupNameLike("%" + qo.getGroupName() + "%");        }        if (null != qo.getPropertyId()) {        	condition.andPropertyIdEqualTo(qo.getPropertyId());        }        if (null != qo.getPropertyName()) {        	condition.andPropertyNameEqualTo(qo.getPropertyName());        }        if (null != qo.getPropertyValue()) {        	condition.andPropertyValueEqualTo(qo.getPropertyValue());        }        if (null != qo.getState()) {        	boolean allState = (-1 == qo.getState());        	if (!allState) {        		condition.andStateEqualTo(qo.getState());        	}        }                lightPageBean.setCount(configMapper.countByExample(configExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<ConfigVo>());            return lightPageBean;        }        if (null != qo.getPageing() && 1 == qo.getPageing()) {        	configExample.setOffset(lightPageBean.getFromIndex());            configExample.setLimit(lightPageBean.getLimit());        }                configExample.setOrderByClause(qo.getOrderBy());                List<Config> configs = configMapper.selectByExample(configExample);        lightPageBean.setData(ConfigServiceImpl.pojoToVo(configs));                return lightPageBean;     }            private static ConfigVo pojoToVo(Config config) throws Exception {        ConfigVo configVo = new ConfigVo();        BeanCopyUtils.copy(config, configVo);        return configVo;    }    private static List<ConfigVo> pojoToVo(List<Config> configs) throws Exception {        List<ConfigVo> configVos = new ArrayList<ConfigVo>();        for (Config d : configs) {            configVos.add(ConfigServiceImpl.pojoToVo(d));        }        return configVos;    }    public ConfigMapper getConfigMapper() {        return configMapper;    }    public void setConfigMapper(ConfigMapper configMapper) {        this.configMapper = configMapper;    }    public ConfigCustomMapper getConfigCustomMapper() {        return configCustomMapper;    }    public void setConfigCustomMapper(ConfigCustomMapper configCustomMapper) {        this.configCustomMapper = configCustomMapper;    }}