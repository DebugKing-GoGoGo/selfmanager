package net.linxingyang.book.controller;import java.util.HashSet;import net.linxingyang.book.exception.BookException;import net.linxingyang.book.pojo.BooklistConfig;import net.linxingyang.book.qo.BooklistQo;import net.linxingyang.book.service.BooklistService;import net.linxingyang.book.vo.BooklistVo;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.vo.CommonVo;import net.linxingyang.common.vo.ResponseCode;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(value="booklist")public class BooklistController {    private static Logger log = LoggerFactory.getLogger(BooklistController.class);    @Autowired    private BooklistService booklistService;    /**     * 查询书单列表     *      * @param qo     * @return     */    @RequestMapping("/listBooklist")    public @ResponseBody LightPageBean<BooklistVo> listBooklist(BooklistQo qo, @RequestParam(value="multiCheckbox[]", required=false) HashSet<Integer> configIds) {        LightPageBean<BooklistVo> vo = new LightPageBean<BooklistVo>();                 try {        	qo.setConfigIds(configIds);            vo = booklistService.selectByQo2(qo);            vo.setCode(ResponseCode.SUCCESS);            vo.setMsg("查询任务成功!");        } catch (BookException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMsg(e.getMessage());            log.info("查询任务失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMsg("内部错误!");            log.info("查询任务失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }    /**     * 查询书单     *      * @param id      * @return     */    @RequestMapping("/queryBooklist")    public @ResponseBody CommonVo queryBooklist(Integer id) {        CommonVo vo = new CommonVo();                try {            vo.setResultObject(booklistService.selectVoById(id));            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("查询书单成功!");        } catch (BookException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("查询书单失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("查询书单失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }        /**     * 更新书单     *      * @param booklist     * @return     */    @RequestMapping("/modifyBooklist")    public @ResponseBody CommonVo modifyBooklist(BooklistVo booklist) {    	CommonVo vo = new CommonVo();    	    	try {    		booklistService.update(booklist);    		vo.setCode(ResponseCode.SUCCESS);    		vo.setMessage("更新书单成功!");    		log.info("更新书单成功");    	} catch (BookException e) {    		vo.setCode(ResponseCode.ERROR_INPUT);    		vo.setMessage(e.getMessage());    		log.info("更新书单失败：" + vo.getCode() + ":" + e.getMessage());    	} catch (Exception e) {    		vo.setCode(ResponseCode.INTERNAL_ERROR);    		vo.setMessage("内部错误!");    		log.info("更新书单失败：" + vo.getCode() + "：" + e.getMessage());    	}     	return vo;    }    /**     * 更新书单及其标签     *      * @param booklist     * @return     */    @RequestMapping("/modifyBooklistWithTags")    public @ResponseBody CommonVo modifyBooklistWithTags(BooklistVo booklist, @RequestParam(value="multiCheckbox[]", required=false) HashSet<Integer> configIds) {        CommonVo vo = new CommonVo();                try {        	if (null != configIds && 0 != configIds.size()) {        		for (Integer configId : configIds) {        			BooklistConfig booklistConfig = new BooklistConfig();        			booklistConfig.setConfigId(configId);        			booklist.getBooklistConfigs().add(booklistConfig);        		}        	}            booklistService.updateVo(booklist);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("更新书单成功!");            log.info("更新书单成功");        } catch (BookException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("更新书单失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("更新书单失败：" + vo.getCode() + "：" + e.getMessage());        }         return vo;    }    /**     * 添加书单     *      * @param booklist 书单     * @return CommonVo 处理结果     */    @RequestMapping("/addBooklist")    public @ResponseBody CommonVo addBooklist(BooklistVo booklist, @RequestParam(value="multiCheckbox[]", required=false) HashSet<Integer> configIds) {        CommonVo vo = new CommonVo();                try {        	if (null != configIds && 0 != configIds.size()) {        		for (Integer configId : configIds) {        			BooklistConfig booklistConfig = new BooklistConfig();        			booklistConfig.setConfigId(configId);        			booklist.getBooklistConfigs().add(booklistConfig);        		}        	}            booklistService.insertVo(booklist);            vo.setCode(ResponseCode.SUCCESS);            vo.setMessage("添加书单成功!");            log.info("添加书单成功");        } catch (BookException e) {            vo.setCode(ResponseCode.ERROR_INPUT);            vo.setMessage(e.getMessage());            log.info("添加书单失败：" + vo.getCode() + ":" + e.getMessage());        } catch (Exception e) {            vo.setCode(ResponseCode.INTERNAL_ERROR);            vo.setMessage("内部错误!");            log.info("添加书单失败：" + vo.getCode() + "：" + e.getMessage());        }        return vo;    }}