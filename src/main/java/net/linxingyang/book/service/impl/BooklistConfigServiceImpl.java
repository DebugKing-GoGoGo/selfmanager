package net.linxingyang.book.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.book.exception.BookException;import net.linxingyang.book.mapper.BooklistConfigCustomMapper;import net.linxingyang.book.mapper.BooklistConfigMapper;import net.linxingyang.book.pojo.BooklistConfig;import net.linxingyang.book.pojo.BooklistConfigExample;import net.linxingyang.book.qo.BooklistConfigQo;import net.linxingyang.book.service.BooklistConfigService;import net.linxingyang.book.vo.BooklistConfigVo;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("booklistConfigService")public class BooklistConfigServiceImpl implements BooklistConfigService {    private static Logger log = LoggerFactory.getLogger(BooklistConfigServiceImpl.class);    @Autowired    private BooklistConfigMapper booklistConfigMapper;    @Autowired    private BooklistConfigCustomMapper booklistConfigCustomMapper;    @Override    public void insert(BooklistConfig booklistConfig) throws Exception {        booklistConfig.setCreateDate(new Date());        booklistConfigMapper.insert(booklistConfig);    }        @Override    public void insertList(List<BooklistConfig> booklistConfigList) throws Exception {        for (BooklistConfig booklistConfig : booklistConfigList) {            insert(booklistConfig);        }    }        @Override    public void insertVo(BooklistConfigVo booklistConfigVo) throws Exception {        insert(booklistConfigVo);        // 插入中间表操作    }        @Override    public void insertVoList(List<BooklistConfigVo> booklistConfigVoList) throws Exception {        for (BooklistConfigVo booklistConfigVo : booklistConfigVoList) {            insertVo(booklistConfigVo);        }    }        @Override    public void update(BooklistConfig booklistConfig) throws Exception {        booklistConfig.setModifyDate(new Date());        booklistConfigMapper.updateByPrimaryKeySelective(booklistConfig);    }        @Override    public void delete(Integer id) throws Exception {        booklistConfigMapper.deleteByPrimaryKey(id);    }    @Override    public void deleteByBooklistId(Integer booklistId) throws Exception {    	if (null == booklistId) {    		throw new BookException("id要求不为空!");    	}    	BooklistConfigExample example = new BooklistConfigExample();    	example.or().andBooklistIdEqualTo(booklistId);        booklistConfigMapper.deleteByExample(example);    }                @Override    public List<BooklistConfig> selectAll() throws Exception {        return booklistConfigMapper.selectByExample(null);    }        @Override    public List<BooklistConfig> selectByExample(BooklistConfigExample qo) throws Exception {        return booklistConfigMapper.selectByExample(qo);    }        @Override    public BooklistConfig selectById(Integer id) throws Exception {        return booklistConfigMapper.selectByPrimaryKey(id);    }            @Override    public BooklistConfigVo selectVoById(Integer id) throws Exception {        BooklistConfig booklistConfig = booklistConfigMapper.selectByPrimaryKey(id);        if (null != booklistConfig) {            return pojoToVo(booklistConfig);        }        return null;            }        @Override    public PageBean<BooklistConfigVo> selectByQo(BooklistConfigQo qo) throws Exception {        PageBean<BooklistConfigVo> pageBean = new PageBean<BooklistConfigVo>();                         return pageBean;     }        @Override    public LightPageBean<BooklistConfigVo> selectByQo2(BooklistConfigQo qo) throws Exception {        LightPageBean<BooklistConfigVo> lightPageBean = new LightPageBean<BooklistConfigVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                BooklistConfigExample booklistConfigExample = new BooklistConfigExample();        BooklistConfigExample.Criteria condition = booklistConfigExample.createCriteria();                lightPageBean.setCount(booklistConfigMapper.countByExample(booklistConfigExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<BooklistConfigVo>());            return lightPageBean;        }                booklistConfigExample.setOffset(lightPageBean.getFromIndex());        booklistConfigExample.setLimit(lightPageBean.getLimit());        booklistConfigExample.setOrderByClause(qo.getOrderBy());                List<BooklistConfig> booklistConfigs = booklistConfigMapper.selectByExample(booklistConfigExample);        lightPageBean.setData(BooklistConfigServiceImpl.pojoToVo(booklistConfigs));                return lightPageBean;     }            private static BooklistConfigVo pojoToVo(BooklistConfig booklistConfig) throws Exception {        BooklistConfigVo booklistConfigVo = new BooklistConfigVo();        BeanCopyUtils.copy(booklistConfig, booklistConfigVo);        return booklistConfigVo;    }    private static List<BooklistConfigVo> pojoToVo(List<BooklistConfig> booklistConfigs) throws Exception {        List<BooklistConfigVo> booklistConfigVos = new ArrayList<BooklistConfigVo>();        for (BooklistConfig d : booklistConfigs) {            booklistConfigVos.add(BooklistConfigServiceImpl.pojoToVo(d));        }        return booklistConfigVos;    }    public BooklistConfigMapper getBooklistConfigMapper() {        return booklistConfigMapper;    }    public void setBooklistConfigMapper(BooklistConfigMapper booklistConfigMapper) {        this.booklistConfigMapper = booklistConfigMapper;    }    public BooklistConfigCustomMapper getBooklistConfigCustomMapper() {        return booklistConfigCustomMapper;    }    public void setBooklistConfigCustomMapper(BooklistConfigCustomMapper booklistConfigCustomMapper) {        this.booklistConfigCustomMapper = booklistConfigCustomMapper;    }}