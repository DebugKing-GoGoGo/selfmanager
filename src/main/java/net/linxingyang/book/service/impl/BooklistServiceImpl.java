package net.linxingyang.book.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.book.mapper.BooklistCustomMapper;import net.linxingyang.book.mapper.BooklistMapper;import net.linxingyang.book.pojo.Booklist;import net.linxingyang.book.pojo.BooklistConfig;import net.linxingyang.book.pojo.BooklistConfigExample;import net.linxingyang.book.pojo.BooklistExample;import net.linxingyang.book.qo.BooklistQo;import net.linxingyang.book.service.BooklistConfigService;import net.linxingyang.book.service.BooklistService;import net.linxingyang.book.vo.BooklistVo;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.config.service.ConfigService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("booklistService")public class BooklistServiceImpl implements BooklistService {    private static Logger log = LoggerFactory.getLogger(BooklistServiceImpl.class);    @Autowired    private BooklistMapper booklistMapper;    @Autowired    private BooklistCustomMapper booklistCustomMapper;    @Autowired    private BooklistConfigService booklistConfigService;    @Autowired    private ConfigService configService;    @Override    public void insert(Booklist booklist) throws Exception {        booklist.setCreateDate(new Date());        // booklistMapper.insert(booklist);        // 使用这个方法会返回插入的对象的id（ID是自动生成的）。        booklistCustomMapper.insert(booklist);    }        @Override    public void insertVo(BooklistVo booklistVo) throws Exception {    	insert(booklistVo);    	// 插入中间表数据    	for (BooklistConfig booklistConfig : booklistVo.getBooklistConfigs()) {    		booklistConfig.setBooklistId(booklistVo.getId());    		booklistConfigService.insert(booklistConfig);    	}    	    }    @Override    public void insertList(List<Booklist> booklistList) throws Exception {    	for (Booklist booklist : booklistList) {    		insert(booklist);    	}    }    @Override    public void insertVoList(List<BooklistVo> booklistVoList) throws Exception {    	for (BooklistVo booklistVo : booklistVoList) {    		insertVo(booklistVo);    	}    }                @Override    public void update(Booklist booklist) throws Exception {        booklist.setModifyDate(new Date());        booklistMapper.updateByPrimaryKeySelective(booklist);            }	@Override    public void updateVo(BooklistVo booklistVo) throws Exception {		booklistVo.setModifyDate(new Date());        booklistMapper.updateByPrimaryKeySelective(booklistVo);                // 一：如果查询出该书本所有的标签，在和当前的标签进行比对是否比较繁琐？        // 二：比较简单的方式，直接先删所有先前的标签，然后再插入标签。        // 这种方式可能会增加对数据库的操作。效率比较低                // 方式一：        // 进行比对，哪些需要插入，哪些不变，那些需要删除。        // 必要的一次查询：该书本的所有标签        // 情况1：前后标签没有变化，不做任何事        // 情况2：前后标签个数/标签值变化了，需要比对                // 方式二：        // 直接删除之前的标签        // 直接插入现在的标签        // 情况一：前后标签没有变化，那么就等于白做了一趟删除，一趟插入        // 情况二：前后标签个数/标签值变化了。无需比对，比较简单。                        // 现在简单点，用方式二。                // 先删除该书本的所有标签        booklistConfigService.deleteByBooklistId(booklistVo.getId());        // 然后再插入    	for (BooklistConfig booklistConfig : booklistVo.getBooklistConfigs()) {    		booklistConfig.setBooklistId(booklistVo.getId());    		booklistConfigService.insert(booklistConfig);    	}    }            @Override    public void delete(Integer id) throws Exception {        booklistMapper.deleteByPrimaryKey(id);    }        @Override    public List<Booklist> selectAll() throws Exception {        return booklistMapper.selectByExample(null);    }        @Override    public List<Booklist> selectByExample(BooklistExample qo) throws Exception {        return booklistMapper.selectByExample(qo);    }        @Override    public Booklist selectById(Integer id) throws Exception {        return booklistMapper.selectByPrimaryKey(id);    }            @Override    public BooklistVo selectVoById(Integer id) throws Exception {        Booklist booklist = booklistMapper.selectByPrimaryKey(id);        if (null != booklist) {        	BooklistVo vo = pojoToVo(booklist);        	addtionProperty(vo);            return vo;        }        return null;            }        @Override    public PageBean<BooklistVo> selectByQo(BooklistQo qo) throws Exception {        PageBean<BooklistVo> pageBean = new PageBean<BooklistVo>();                         return pageBean;     }        @Override	public List<Integer> selectIds(BooklistQo booklistQo) {    	return booklistCustomMapper.selectIds(booklistQo);	}	@Override    public LightPageBean<BooklistVo> selectByQo2(BooklistQo qo) throws Exception {        LightPageBean<BooklistVo> lightPageBean = new LightPageBean<BooklistVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                BooklistExample booklistExample = new BooklistExample();        BooklistExample.Criteria condition = booklistExample.createCriteria();        BooklistExample.Criteria condition2 = booklistExample.createCriteria();                if (null != qo.getBookName()) {        	condition.andBookNameLike("%" + qo.getBookName() + "%");        	condition2.andAuthorLike("%" + qo.getBookName() + "%");        }        if (null != qo.getDiscard() && -1 != qo.getDiscard()) {        	condition.andDiscardEqualTo(qo.getDiscard());        	condition2.andDiscardEqualTo(qo.getDiscard());        }        if (null != qo.getState() && -1 != qo.getState()) {        	condition.andStateEqualTo(qo.getState());        	condition2.andStateEqualTo(qo.getState());        }        if (null != qo.getYear()) {        	condition.andYearEqualTo(qo.getYear());        	condition2.andYearEqualTo(qo.getYear());        }        if (null != qo.getConfigIds()) {        	int tagNumber = qo.getConfigIds().size();        	if (0 != tagNumber) {        		qo.setConfigIdsLength(tagNumber);        		List<Integer> booklistIds = selectIds(qo);        		        		if (0 == booklistIds.size()) {        			// 如果没数据，那就直接不用继续再查了。        			lightPageBean.setCount(0);                    lightPageBean.setCode(ResponseCode.SUCCESS);                    lightPageBean.setMsg("没有符合条件的数据!");                    lightPageBean.setData(new ArrayList<BooklistVo>());                    return lightPageBean;            	} else {            		condition.andIdIn(booklistIds);            		condition2.andIdIn(booklistIds);            	}        	}        }                lightPageBean.setCount(booklistMapper.countByExample(booklistExample));                if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<BooklistVo>());            return lightPageBean;        }                booklistExample.setOffset(lightPageBean.getFromIndex());        booklistExample.setLimit(lightPageBean.getLimit());        booklistExample.setOrderByClause(qo.getOrderBy());                List<Booklist> booklists = booklistMapper.selectByExample(booklistExample);        lightPageBean.setData(BooklistServiceImpl.pojoToVo(booklists));                addtionProperty(lightPageBean.getData());                return lightPageBean;     }    	private void addtionProperty(BooklistVo booklistVo) throws Exception {		// booklist和config是多对多关系。		// 读取中间表 booklist_config中的数据		BooklistConfigExample qo = new BooklistConfigExample();		qo.or().andBooklistIdEqualTo(booklistVo.getId());		// booklistVo.getBooklistConfigs().addAll(booklistConfigService.selectByExample(qo));		// 根据booklist_config中的数据读取config中的数据		for (BooklistConfig booklistConfig : booklistConfigService.selectByExample(qo)) {			booklistVo.getConfigs().add(configService.selectById(booklistConfig.getConfigId()));		}	}     private void addtionProperty(List<BooklistVo> booklistVos) throws Exception {    	// booklist和config是多对多关系。    	for (BooklistVo booklistVo : booklistVos) {    		// 读取中间表 booklist_config中的数据    		BooklistConfigExample qo = new BooklistConfigExample();    		qo.or().andBooklistIdEqualTo(booklistVo.getId());    		// booklistVo.getBooklistConfigs().addAll(booklistConfigService.selectByExample(qo));    		// 根据booklist_config中的数据读取config中的数据    		for (BooklistConfig booklistConfig : booklistConfigService.selectByExample(qo)) {    			booklistVo.getConfigs().add(configService.selectById(booklistConfig.getConfigId()));    		}		}    }         private static BooklistVo pojoToVo(Booklist booklist) throws Exception {        BooklistVo booklistVo = new BooklistVo();        BeanCopyUtils.copy(booklist, booklistVo);        return booklistVo;    }    private static List<BooklistVo> pojoToVo(List<Booklist> booklists) throws Exception {        List<BooklistVo> booklistVos = new ArrayList<BooklistVo>();        for (Booklist d : booklists) {            booklistVos.add(BooklistServiceImpl.pojoToVo(d));                    }        return booklistVos;    }    public BooklistMapper getBooklistMapper() {        return booklistMapper;    }    public void setBooklistMapper(BooklistMapper booklistMapper) {        this.booklistMapper = booklistMapper;    }    public BooklistCustomMapper getBooklistCustomMapper() {        return booklistCustomMapper;    }    public void setBooklistCustomMapper(BooklistCustomMapper booklistCustomMapper) {        this.booklistCustomMapper = booklistCustomMapper;    }}