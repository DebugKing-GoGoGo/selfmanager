package net.linxingyang.diary.controller;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.vo.CommonVo;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.diary.exception.DiaryException;import net.linxingyang.diary.pojo.Diary;import net.linxingyang.diary.qo.DiaryQo;import net.linxingyang.diary.service.DiaryService;import net.linxingyang.diary.vo.DiaryVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(value="diary")public class DiaryController {    private static Logger log = LoggerFactory.getLogger(DiaryController.class);    @Autowired    private DiaryService diaryService;        @RequestMapping("/queryDiary")    public @ResponseBody CommonVo queryDiary(Integer id) {    	CommonVo vo = new CommonVo();    	    	try {    		vo.setResultObject(diaryService.selectVoById(id));    		vo.setCode(ResponseCode.SUCCESS);    		vo.setMessage("查询日记成功!");    	} catch (DiaryException e) {    		vo.setCode(ResponseCode.ERROR_INPUT);    		vo.setMessage(e.getMessage());    		log.info("查询日记失败：" + vo.getCode() + ":" + e.getMessage());		} catch (Exception e) {			vo.setCode(ResponseCode.INTERNAL_ERROR);			vo.setMessage("内部错误!");			log.info("查询日记失败：" + vo.getCode() + "：" + e.getMessage());		}    	return vo;    }        /**     * 更新日记     *      * @param diary 日记     * @return CommonVo 处理结果     */    @RequestMapping("/modifyDiary")    public @ResponseBody CommonVo modifyDiary(Diary diary) {    	CommonVo vo = new CommonVo();    	    	try {    		diaryService.update(diary);    		vo.setCode(ResponseCode.SUCCESS);    		vo.setMessage("更新日记成功!");    		log.info("更新日记成功");    	} catch (DiaryException e) {    		vo.setCode(ResponseCode.ERROR_INPUT);    		vo.setMessage(e.getMessage());    		log.info("更新日记失败：" + vo.getCode() + ":" + e.getMessage());		} catch (Exception e) {			vo.setCode(ResponseCode.INTERNAL_ERROR);			vo.setMessage("内部错误!");			log.info("更新日记失败：" + vo.getCode() + "：" + e.getMessage());		}    	return vo;    }            @RequestMapping("/listDiary")    public @ResponseBody LightPageBean<DiaryVo> listDiary(DiaryQo qo) {    	System.out.println(qo);    	LightPageBean<DiaryVo> vo = new LightPageBean<DiaryVo>();     	try {    		vo = diaryService.selectByQo2(qo);    		vo.setCode(ResponseCode.SUCCESS);    		vo.setMsg("查询日记成功!");    	} catch (DiaryException e) {    		vo.setCode(ResponseCode.ERROR_INPUT);    		vo.setMsg(e.getMessage());    		log.info("查询日记失败：" + vo.getCode() + ":" + e.getMessage());		} catch (Exception e) {			vo.setCode(ResponseCode.INTERNAL_ERROR);			vo.setMsg("内部错误!");			log.info("查询日记失败：" + vo.getCode() + "：" + e.getMessage());		}    	return vo;    }        /**     * 添加日记     *      * @param diary 日记     * @return CommonVo 处理结果     */    @RequestMapping("/addDiary")    public @ResponseBody CommonVo addDiary(Diary diary) {    	CommonVo vo = new CommonVo();    	    	try {    		diaryService.insert(diary);    		vo.setCode(ResponseCode.SUCCESS);    		vo.setMessage("添加日记成功!");    		log.info("添加日记成功");    	} catch (DiaryException e) {    		vo.setCode(ResponseCode.ERROR_INPUT);    		vo.setMessage(e.getMessage());    		log.info("添加日记失败：" + vo.getCode() + ":" + e.getMessage());		} catch (Exception e) {			vo.setCode(ResponseCode.INTERNAL_ERROR);			vo.setMessage("内部错误!");			log.info("添加日记失败：" + vo.getCode() + "：" + e.getMessage());		}    	return vo;    }        /*    @RequestMapping("/existsDiaryByDiaryDate")    public @ResponseBody CommonVo existsDiaryByDiaryDate(Date diaryDate) {    	CommonVo vo = new CommonVo();    	    	try {    		diaryService.existsDiaryByDiaryDate(diaryDate);    		vo.setCode(CommonVo.SUCCESS);    		vo.setMessage("添加成功!");    	} catch (DiaryException e) {    		vo.setCode(CommonVo.ERROR_INPUT);    		vo.setMessage(e.getMessage());    	} catch (Exception e) {    		vo.setCode(CommonVo.INTERNAL_ERROR);    		vo.setMessage("内部错误!");    	}    	return vo;    }*/}