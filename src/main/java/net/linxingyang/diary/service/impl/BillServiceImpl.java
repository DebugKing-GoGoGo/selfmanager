package net.linxingyang.diary.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.config.service.ConfigService;import net.linxingyang.diary.mapper.BillCustomMapper;import net.linxingyang.diary.mapper.BillMapper;import net.linxingyang.diary.pojo.Bill;import net.linxingyang.diary.pojo.BillExample;import net.linxingyang.diary.qo.BillQo;import net.linxingyang.diary.service.BillService;import net.linxingyang.diary.vo.BillVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("billService")public class BillServiceImpl implements BillService {    private static Logger log = LoggerFactory.getLogger(BillServiceImpl.class);    @Autowired    private BillMapper billMapper;    @Autowired    private BillCustomMapper billCustomMapper;    @Autowired    private ConfigService configService;    @Override    public void insert(Bill bill) throws Exception {        bill.setCreateDate(new Date());        billMapper.insert(bill);    }        @Override    public void update(Bill bill) throws Exception {        bill.setModifyDate(new Date());        billMapper.updateByPrimaryKeySelective(bill);    }        @Override    public void delete(Integer id) throws Exception {        billMapper.deleteByPrimaryKey(id);    }        @Override    public List<Bill> selectAll() throws Exception {        return billMapper.selectByExample(null);    }        @Override    public List<Bill> selectByExample(BillExample qo) throws Exception {        return billMapper.selectByExample(qo);    }        @Override    public Bill selectById(Integer id) throws Exception {        return billMapper.selectByPrimaryKey(id);    }            @Override    public BillVo selectVoById(Integer id) throws Exception {        Bill bill = billMapper.selectByPrimaryKey(id);        if (null != bill) {            return pojoToVo(bill);        }        return null;            }        @Override    public PageBean<BillVo> selectByQo(BillQo qo) throws Exception {        PageBean<BillVo> pageBean = new PageBean<BillVo>();                         return pageBean;     }        @Override    public LightPageBean<BillVo> selectByQo2(BillQo qo) throws Exception {        LightPageBean<BillVo> lightPageBean = new LightPageBean<BillVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                BillExample billExample = new BillExample();        BillExample.Criteria condition = billExample.createCriteria();                if (null != qo.getMinBillDate() && null !=qo.getMaxBillDate()) {        	condition.andBillDateBetween(qo.getMinBillDate(), qo.getMaxBillDate());        } else if (null != qo.getMinBillDate()) {        	condition.andBillDateGreaterThanOrEqualTo(qo.getMinBillDate());	    } else if (null != qo.getMaxBillDate()) {	    	condition.andBillDateLessThanOrEqualTo(qo.getMaxBillDate());	    }         // if (null != qo.getPayWay() && -1 != qo.getPayWay()) {        	// condition.andPayWayEqualTo(qo.getPayWay());        // }        if (null != qo.getPayType() && -1 != qo.getPayType()) {        	condition.andPayTypeEqualTo(qo.getPayType());        }        if (null != qo.getCostType() && -1 != qo.getCostType()) {        	condition.andCostTypeEqualTo(qo.getCostType());        }        if (null != qo.getConfigIds()) {        	int tagNumber = qo.getConfigIds().size();        	if (0 != tagNumber) {        		List<Integer> list = new ArrayList<Integer>();        		list.addAll(qo.getConfigIds());        		condition.andPayWayIn(list);        		/*        		qo.setConfigIdsLength(tagNumber);        		List<Integer> booklistIds = selectIds(qo);        		        		if (0 == booklistIds.size()) {        			// 如果没数据，那就直接不用继续再查了。        			lightPageBean.setCount(0);                    lightPageBean.setCode(ResponseCode.SUCCESS);                    lightPageBean.setMsg("没有符合条件的数据!");                    lightPageBean.setData(new ArrayList<BooklistVo>());                    return lightPageBean;            	} else {            		condition.andIdIn(booklistIds);            		condition2.andIdIn(booklistIds);            	}*/        	}        }                lightPageBean.setCount(billMapper.countByExample(billExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<BillVo>());            return lightPageBean;        }                billExample.setOffset(lightPageBean.getFromIndex());        billExample.setLimit(lightPageBean.getLimit());        billExample.setOrderByClause(qo.getOrderBy());                List<Bill> bills = billMapper.selectByExample(billExample);        lightPageBean.setData(BillServiceImpl.pojoToVo(bills));                addtionProperty(lightPageBean.getData());                return lightPageBean;     }            private void addtionProperty(BillVo billVo) throws Exception {		// bill和config是一对多关系关系。    	// 一个bill只能对应一个config    	// 一个config可以对应多个bill		// BooklistConfigExample qo = new BooklistConfigExample();		// qo.or().andBooklistIdEqualTo(booklistVo.getId());    	billVo.setTag(configService.selectById(billVo.getPayWay()));			}     private void addtionProperty(List<BillVo> billVos) throws Exception {    	for (BillVo billVo : billVos) {    		addtionProperty(billVo);		}    }             private static BillVo pojoToVo(Bill bill) throws Exception {        BillVo billVo = new BillVo();        BeanCopyUtils.copy(bill, billVo);        return billVo;    }    private static List<BillVo> pojoToVo(List<Bill> bills) throws Exception {        List<BillVo> billVos = new ArrayList<BillVo>();        for (Bill d : bills) {            billVos.add(BillServiceImpl.pojoToVo(d));        }        return billVos;    }    public BillMapper getBillMapper() {        return billMapper;    }    public void setBillMapper(BillMapper billMapper) {        this.billMapper = billMapper;    }    public BillCustomMapper getBillCustomMapper() {        return billCustomMapper;    }    public void setBillCustomMapper(BillCustomMapper billCustomMapper) {        this.billCustomMapper = billCustomMapper;    }}