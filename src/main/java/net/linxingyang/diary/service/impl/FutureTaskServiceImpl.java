package net.linxingyang.diary.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.diary.mapper.FutureTaskCustomMapper;import net.linxingyang.diary.mapper.FutureTaskMapper;import net.linxingyang.diary.pojo.FutureTask;import net.linxingyang.diary.pojo.FutureTaskExample;import net.linxingyang.diary.qo.FutureTaskQo;import net.linxingyang.diary.service.FutureTaskService;import net.linxingyang.diary.vo.FutureTaskVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("futureTaskService")public class FutureTaskServiceImpl implements FutureTaskService {    private static Logger log = LoggerFactory.getLogger(FutureTaskServiceImpl.class);    @Autowired    private FutureTaskMapper futureTaskMapper;    @Autowired    private FutureTaskCustomMapper futureTaskCustomMapper;    @Override    public void insert(FutureTask futureTask) throws Exception {        futureTask.setCreateDate(new Date());        futureTaskMapper.insert(futureTask);    }        @Override    public void update(FutureTask futureTask) throws Exception {        futureTask.setModifyDate(new Date());        futureTaskMapper.updateByPrimaryKeySelective(futureTask);    }        @Override    public void delete(Integer id) throws Exception {        futureTaskMapper.deleteByPrimaryKey(id);    }        @Override    public List<FutureTask> selectAll() throws Exception {        return futureTaskMapper.selectByExample(null);    }        @Override    public List<FutureTask> selectByExample(FutureTaskExample qo) throws Exception {        return futureTaskMapper.selectByExample(qo);    }        @Override    public FutureTask selectById(Integer id) throws Exception {        return futureTaskMapper.selectByPrimaryKey(id);    }            @Override    public FutureTaskVo selectVoById(Integer id) throws Exception {        FutureTask futureTask = futureTaskMapper.selectByPrimaryKey(id);        if (null != futureTask) {            return pojoToVo(futureTask);        }        return null;            }        @Override    public PageBean<FutureTaskVo> selectByQo(FutureTaskQo qo) throws Exception {        PageBean<FutureTaskVo> pageBean = new PageBean<FutureTaskVo>();                         return pageBean;     }        @Override    public LightPageBean<FutureTaskVo> selectByQo2(FutureTaskQo qo) throws Exception {        LightPageBean<FutureTaskVo> lightPageBean = new LightPageBean<FutureTaskVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                FutureTaskExample futureTaskExample = new FutureTaskExample();        FutureTaskExample.Criteria condition = futureTaskExample.createCriteria();                if (null != qo.getState() && -1 != qo.getState()) {        	condition.andStateEqualTo(qo.getState());        }        if (null != qo.getTaskName()) {        	condition.andTaskNameLike("%" + qo.getTaskName() + "%");        }                lightPageBean.setCount(futureTaskMapper.countByExample(futureTaskExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<FutureTaskVo>());            return lightPageBean;        }                futureTaskExample.setOffset(lightPageBean.getFromIndex());        futureTaskExample.setLimit(lightPageBean.getLimit());        futureTaskExample.setOrderByClause(qo.getOrderBy());                List<FutureTask> futureTasks = futureTaskMapper.selectByExample(futureTaskExample);        lightPageBean.setData(FutureTaskServiceImpl.pojoToVo(futureTasks));                return lightPageBean;     }            private static FutureTaskVo pojoToVo(FutureTask futureTask) throws Exception {        FutureTaskVo futureTaskVo = new FutureTaskVo();        BeanCopyUtils.copy(futureTask, futureTaskVo);        return futureTaskVo;    }    private static List<FutureTaskVo> pojoToVo(List<FutureTask> futureTasks) throws Exception {        List<FutureTaskVo> futureTaskVos = new ArrayList<FutureTaskVo>();        for (FutureTask d : futureTasks) {            futureTaskVos.add(FutureTaskServiceImpl.pojoToVo(d));        }        return futureTaskVos;    }    public FutureTaskMapper getFutureTaskMapper() {        return futureTaskMapper;    }    public void setFutureTaskMapper(FutureTaskMapper futureTaskMapper) {        this.futureTaskMapper = futureTaskMapper;    }    public FutureTaskCustomMapper getFutureTaskCustomMapper() {        return futureTaskCustomMapper;    }    public void setFutureTaskCustomMapper(FutureTaskCustomMapper futureTaskCustomMapper) {        this.futureTaskCustomMapper = futureTaskCustomMapper;    }}