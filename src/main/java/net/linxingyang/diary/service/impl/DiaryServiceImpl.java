package net.linxingyang.diary.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.diary.exception.DiaryException;import net.linxingyang.diary.mapper.DiaryCustomMapper;import net.linxingyang.diary.mapper.DiaryMapper;import net.linxingyang.diary.pojo.Diary;import net.linxingyang.diary.pojo.DiaryExample;import net.linxingyang.diary.qo.DiaryQo;import net.linxingyang.diary.service.DiaryService;import net.linxingyang.diary.vo.DiaryVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("diaryService")public class DiaryServiceImpl implements DiaryService {    private static Logger log = LoggerFactory.getLogger(DiaryServiceImpl.class);        @Autowired    private DiaryMapper diaryMapper;    @Autowired    private DiaryCustomMapper diaryCustomMapper;    @Override    public boolean existsDiaryByDiaryDate(Date diaryDate) throws Exception {    	if (null == diaryDate) {    		throw new DiaryException("请选择日期用于判断该日期是否已经存在日记!");    	}    	final DiaryExample diaryExample = new DiaryExample();    	diaryExample.or().andDiaryDateEqualTo(diaryDate);    	final List<Diary> diarys = selectByExample(diaryExample);    	final boolean existsDiary = diarys.size() > 0;    	return existsDiary;    }        @Override    public void insert(Diary diary) throws Exception {    	// 某日的日记已经存在，则不能重复创建该日的日记    	if (existsDiaryByDiaryDate(diary.getDiaryDate())) {    		throw new DiaryException("当天已经存在日记，不能重复添加日记!");    	}    	diary.setCreateDate(new Date());        diaryMapper.insert(diary);    }        @Override    public void update(Diary diary) throws Exception {    	diary.setModifyDate(new Date());        diaryMapper.updateByPrimaryKeySelective(diary);    }        @Override    public void delete(Integer id) throws Exception {        diaryMapper.deleteByPrimaryKey(id);    }        @Override    public List<Diary> selectAll() throws Exception {        return diaryMapper.selectByExample(null);    }    @Override    public List<Diary> selectAllWithBLOBs() throws Exception {    	return diaryMapper.selectByExampleWithBLOBs(null);    }                @Override    public List<Diary> selectByExample(DiaryExample qo) throws Exception {        return diaryMapper.selectByExample(qo);    }        @Override    public Diary selectById(Integer id) throws Exception {    	if (null == id) {    		throw new DiaryException("查询日记的id为空!");    	}        return diaryMapper.selectByPrimaryKey(id);    }        @Override    public DiaryVo selectVoById(Integer id) throws Exception {    	Diary diary = selectById(id);    	if (null != diary) {    		return pojoToVo(diary);    	}    	return null;    }                @Override    public PageBean<DiaryVo> selectByQo(DiaryQo qo) throws Exception {        PageBean<DiaryVo> pageBean = new PageBean<DiaryVo>();                         return pageBean;     }    @Override    public LightPageBean<DiaryVo> selectByQo2(DiaryQo qo) throws Exception {    	LightPageBean<DiaryVo> lightPageBean = new LightPageBean<DiaryVo>();    	lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());    	lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());    	    	DiaryExample diaryExample = new DiaryExample();    	    	    	DiaryExample.Criteria condition = diaryExample.createCriteria();    	if (null != qo.getMinDiaryDate() && null != qo.getMaxDiaryDate()) {    		condition.andDiaryDateBetween(qo.getMinDiaryDate(), qo.getMaxDiaryDate());    	} else if (null != qo.getMinDiaryDate() ) {    		condition.andDiaryDateGreaterThanOrEqualTo(qo.getMinDiaryDate());    	} else if (null != qo.getMaxDiaryDate()) {    		condition.andDiaryDateLessThanOrEqualTo(qo.getMaxDiaryDate());    	}    	    	lightPageBean.setCount(diaryMapper.countByExample(diaryExample));    	    	    	if (0 == lightPageBean.getTotalPage()) {    		// 如果没数据，那就直接不用继续再查了。    		lightPageBean.setCode(0);    		lightPageBean.setMsg("没有符合条件的数据!");    		lightPageBean.setData(new ArrayList<DiaryVo>());    		return lightPageBean;    	}    	    	diaryExample.setOffset(lightPageBean.getFromIndex());    	diaryExample.setLimit(lightPageBean.getLimit());    	// 由于mybaits内部有判空，故此不判空。    	diaryExample.setOrderByClause(qo.getOrderBy());    	List<Diary> diarys = diaryMapper.selectByExampleWithBLOBs(diaryExample);    	lightPageBean.setData(DiaryServiceImpl.pojoToVo(diarys));    	    	return lightPageBean;     }        private static DiaryVo pojoToVo(Diary diary) throws Exception {    	DiaryVo diaryVo = new DiaryVo();		BeanCopyUtils.copy(diary, diaryVo);		return diaryVo;    }    private static List<DiaryVo> pojoToVo(List<Diary> diarys) throws Exception {		List<DiaryVo> diaryVos = new ArrayList<DiaryVo>();		for (Diary d : diarys) {			diaryVos.add(DiaryServiceImpl.pojoToVo(d));		}		return diaryVos;    }        public DiaryMapper getDiaryMapper() {        return diaryMapper;    }    public void setDiaryMapper(DiaryMapper diaryMapper) {        this.diaryMapper = diaryMapper;    }    public DiaryCustomMapper getDiaryCustomMapper() {        return diaryCustomMapper;    }    public void setDiaryCustomMapper(DiaryCustomMapper diaryCustomMapper) {        this.diaryCustomMapper = diaryCustomMapper;    }}