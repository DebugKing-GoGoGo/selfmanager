package net.linxingyang.diary.service.impl;import java.util.ArrayList;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.vo.ResponseCode;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Date;import net.linxingyang.diary.pojo.WeekTask;import net.linxingyang.diary.pojo.WeekTaskExample;import net.linxingyang.diary.vo.WeekTaskVo;import net.linxingyang.diary.qo.WeekTaskQo;import net.linxingyang.diary.service.WeekTaskService;import net.linxingyang.diary.mapper.WeekTaskMapper;import net.linxingyang.diary.mapper.WeekTaskCustomMapper;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;import org.springframework.stereotype.Service;@Service("weekTaskService")public class WeekTaskServiceImpl implements WeekTaskService {    private static Logger log = LoggerFactory.getLogger(WeekTaskServiceImpl.class);    @Autowired    private WeekTaskMapper weekTaskMapper;    @Autowired    private WeekTaskCustomMapper weekTaskCustomMapper;    @Override    public void insert(WeekTask weekTask) throws Exception {        weekTask.setCreateDate(new Date());        weekTaskMapper.insert(weekTask);    }        @Override    public void update(WeekTask weekTask) throws Exception {        weekTask.setModifyDate(new Date());        weekTaskMapper.updateByPrimaryKeySelective(weekTask);    }        @Override    public void delete(Integer id) throws Exception {        weekTaskMapper.deleteByPrimaryKey(id);    }        @Override    public List<WeekTask> selectAll() throws Exception {        return weekTaskMapper.selectByExample(null);    }        @Override    public List<WeekTask> selectByExample(WeekTaskExample qo) throws Exception {        return weekTaskMapper.selectByExample(qo);    }        @Override    public WeekTask selectById(Integer id) throws Exception {        return weekTaskMapper.selectByPrimaryKey(id);    }            @Override    public WeekTaskVo selectVoById(Integer id) throws Exception {        WeekTask weekTask = weekTaskMapper.selectByPrimaryKey(id);        if (null != weekTask) {            return pojoToVo(weekTask);        }        return null;            }        @Override    public PageBean<WeekTaskVo> selectByQo(WeekTaskQo qo) throws Exception {        PageBean<WeekTaskVo> pageBean = new PageBean<WeekTaskVo>();                         return pageBean;     }        @Override    public LightPageBean<WeekTaskVo> selectByQo2(WeekTaskQo qo) throws Exception {        LightPageBean<WeekTaskVo> lightPageBean = new LightPageBean<WeekTaskVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                WeekTaskExample weekTaskExample = new WeekTaskExample();        WeekTaskExample.Criteria condition = weekTaskExample.createCriteria();                lightPageBean.setCount(weekTaskMapper.countByExample(weekTaskExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<WeekTaskVo>());            return lightPageBean;        }                weekTaskExample.setOffset(lightPageBean.getFromIndex());        weekTaskExample.setLimit(lightPageBean.getLimit());        weekTaskExample.setOrderByClause(qo.getOrderBy());                List<WeekTask> weekTasks = weekTaskMapper.selectByExample(weekTaskExample);        lightPageBean.setData(WeekTaskServiceImpl.pojoToVo(weekTasks));                return lightPageBean;     }            private static WeekTaskVo pojoToVo(WeekTask weekTask) throws Exception {        WeekTaskVo weekTaskVo = new WeekTaskVo();        BeanCopyUtils.copy(weekTask, weekTaskVo);        return weekTaskVo;    }    private static List<WeekTaskVo> pojoToVo(List<WeekTask> weekTasks) throws Exception {        List<WeekTaskVo> weekTaskVos = new ArrayList<WeekTaskVo>();        for (WeekTask d : weekTasks) {            weekTaskVos.add(WeekTaskServiceImpl.pojoToVo(d));        }        return weekTaskVos;    }    public WeekTaskMapper getWeekTaskMapper() {        return weekTaskMapper;    }    public void setWeekTaskMapper(WeekTaskMapper weekTaskMapper) {        this.weekTaskMapper = weekTaskMapper;    }    public WeekTaskCustomMapper getWeekTaskCustomMapper() {        return weekTaskCustomMapper;    }    public void setWeekTaskCustomMapper(WeekTaskCustomMapper weekTaskCustomMapper) {        this.weekTaskCustomMapper = weekTaskCustomMapper;    }}