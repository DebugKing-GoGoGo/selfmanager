package net.linxingyang.diary.service.impl;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import net.linxingyang.common.utils.BeanCopyUtils;import net.linxingyang.common.utils.LightPageBean;import net.linxingyang.common.utils.PageBean;import net.linxingyang.common.vo.ResponseCode;import net.linxingyang.diary.mapper.FutureTaskDetailCustomMapper;import net.linxingyang.diary.mapper.FutureTaskDetailMapper;import net.linxingyang.diary.pojo.FutureTaskDetail;import net.linxingyang.diary.pojo.FutureTaskDetailExample;import net.linxingyang.diary.qo.FutureTaskDetailQo;import net.linxingyang.diary.service.FutureTaskDetailService;import net.linxingyang.diary.vo.FutureTaskDetailVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("futureTaskDetailService")public class FutureTaskDetailServiceImpl implements FutureTaskDetailService {    private static Logger log = LoggerFactory.getLogger(FutureTaskDetailServiceImpl.class);    @Autowired    private FutureTaskDetailMapper futureTaskDetailMapper;    @Autowired    private FutureTaskDetailCustomMapper futureTaskDetailCustomMapper;    @Override    public void insert(FutureTaskDetail futureTaskDetail) throws Exception {        futureTaskDetail.setCreateDate(new Date());        futureTaskDetailMapper.insert(futureTaskDetail);    }        @Override    public void insertList(List<FutureTaskDetail> futureTaskDetailList) throws Exception {        for (FutureTaskDetail futureTaskDetail : futureTaskDetailList) {            insert(futureTaskDetail);        }    }        @Override    public void insertVo(FutureTaskDetailVo futureTaskDetailVo) throws Exception {        insert(futureTaskDetailVo);        // 插入中间表操作    }        @Override    public void insertVoList(List<FutureTaskDetailVo> futureTaskDetailVoList) throws Exception {        for (FutureTaskDetailVo futureTaskDetailVo : futureTaskDetailVoList) {            insertVo(futureTaskDetailVo);        }    }        @Override    public void update(FutureTaskDetail futureTaskDetail) throws Exception {        futureTaskDetail.setModifyDate(new Date());        futureTaskDetailMapper.updateByPrimaryKeySelective(futureTaskDetail);    }        @Override    public void delete(Integer id) throws Exception {        futureTaskDetailMapper.deleteByPrimaryKey(id);    }        @Override    public List<FutureTaskDetail> selectAll() throws Exception {        return futureTaskDetailMapper.selectByExample(null);    }        @Override    public List<FutureTaskDetail> selectByExample(FutureTaskDetailExample qo) throws Exception {        return futureTaskDetailMapper.selectByExample(qo);    }        @Override    public FutureTaskDetail selectById(Integer id) throws Exception {        return futureTaskDetailMapper.selectByPrimaryKey(id);    }            @Override    public FutureTaskDetailVo selectVoById(Integer id) throws Exception {        FutureTaskDetail futureTaskDetail = futureTaskDetailMapper.selectByPrimaryKey(id);        if (null != futureTaskDetail) {            return pojoToVo(futureTaskDetail);        }        return null;            }        @Override    public PageBean<FutureTaskDetailVo> selectByQo(FutureTaskDetailQo qo) throws Exception {        PageBean<FutureTaskDetailVo> pageBean = new PageBean<FutureTaskDetailVo>();                         return pageBean;     }        @Override    public LightPageBean<FutureTaskDetailVo> selectByQo2(FutureTaskDetailQo qo) throws Exception {        LightPageBean<FutureTaskDetailVo> lightPageBean = new LightPageBean<FutureTaskDetailVo>();                lightPageBean.setPage(qo.getPage() == null ? 1 : qo.getPage());        lightPageBean.setLimit(qo.getLimit() == null ? 10 : qo.getLimit());                FutureTaskDetailExample futureTaskDetailExample = new FutureTaskDetailExample();        FutureTaskDetailExample.Criteria condition = futureTaskDetailExample.createCriteria();                if (null != qo.getFutureId()) {        	condition.andFutureIdEqualTo(qo.getFutureId());        }        if (null != qo.getMinPlanDate()) {        	condition.andPlanDateGreaterThanOrEqualTo(qo.getMinPlanDate());        }        if (null != qo.getMaxPlanDate()) {        	condition.andPlanDateLessThanOrEqualTo(qo.getMaxPlanDate());        }        if (null != qo.getPlanDate()) {        	// Date nextDate         	Calendar nextDate = Calendar.getInstance();        	nextDate.setTime(qo.getPlanDate());        	// 加一天减一秒，效果如下        	// 2018-07-14 00:00:00.0(Timestamp), 2018-07-14 23:59:59.0(Timestamp)        	nextDate.add(Calendar.DATE, 1);        	nextDate.add(Calendar.SECOND, -1);         	condition.andPlanDateBetween(qo.getPlanDate(), nextDate.getTime());        } else if (qo.isToday()) {        	Calendar today = Calendar.getInstance();        	today.set(Calendar.HOUR_OF_DAY, 0);        	today.set(Calendar.MINUTE, 0);        	today.set(Calendar.SECOND, 0);        	today.set(Calendar.MILLISECOND, 0);        	Calendar nextDate = Calendar.getInstance();        	nextDate.setTime(today.getTime());        	nextDate.add(Calendar.DATE, 1);        	nextDate.add(Calendar.SECOND, -1);        	// System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today.getTime()));        	// System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(nextDate.getTime()));        	condition.andPlanDateBetween(today.getTime(), nextDate.getTime());        }                        System.out.println(futureTaskDetailMapper.countByExample(futureTaskDetailExample));        lightPageBean.setCount(futureTaskDetailMapper.countByExample(futureTaskDetailExample));        if (0 == lightPageBean.getCount()) {            // 如果没数据，那就直接不用继续再查了。            lightPageBean.setCode(ResponseCode.SUCCESS);            lightPageBean.setMsg("没有符合条件的数据!");            lightPageBean.setData(new ArrayList<FutureTaskDetailVo>());            return lightPageBean;        }                if (qo.isPaging()) {        	futureTaskDetailExample.setOffset(lightPageBean.getFromIndex());            futureTaskDetailExample.setLimit(lightPageBean.getLimit());        }        futureTaskDetailExample.setOrderByClause(qo.getOrderBy());                List<FutureTaskDetail> futureTaskDetails = futureTaskDetailMapper.selectByExample(futureTaskDetailExample);        lightPageBean.setData(FutureTaskDetailServiceImpl.pojoToVo(futureTaskDetails));                return lightPageBean;     }            private static FutureTaskDetailVo pojoToVo(FutureTaskDetail futureTaskDetail) throws Exception {        FutureTaskDetailVo futureTaskDetailVo = new FutureTaskDetailVo();        BeanCopyUtils.copy(futureTaskDetail, futureTaskDetailVo);        return futureTaskDetailVo;    }    private static List<FutureTaskDetailVo> pojoToVo(List<FutureTaskDetail> futureTaskDetails) throws Exception {        List<FutureTaskDetailVo> futureTaskDetailVos = new ArrayList<FutureTaskDetailVo>();        for (FutureTaskDetail d : futureTaskDetails) {            futureTaskDetailVos.add(FutureTaskDetailServiceImpl.pojoToVo(d));        }        return futureTaskDetailVos;    }    public FutureTaskDetailMapper getFutureTaskDetailMapper() {        return futureTaskDetailMapper;    }    public void setFutureTaskDetailMapper(FutureTaskDetailMapper futureTaskDetailMapper) {        this.futureTaskDetailMapper = futureTaskDetailMapper;    }    public FutureTaskDetailCustomMapper getFutureTaskDetailCustomMapper() {        return futureTaskDetailCustomMapper;    }    public void setFutureTaskDetailCustomMapper(FutureTaskDetailCustomMapper futureTaskDetailCustomMapper) {        this.futureTaskDetailCustomMapper = futureTaskDetailCustomMapper;    }}